자바스크립트 요점 정리 


[변수 선언]

1. let : 변수 선언 중복 불가, 수정가능 
   const :  변수 선언 중복 불가 , 수정 불가 , 주로 절대 변하지 않는 상수 
   --> 변수 선언시 변하지 않는 값은 const  변하는 값은 let으로 선언
   tip : 모든 변수를 const로 선언후 나중에 변경될 여지가 있는 변수만 let으로 변경한다. 


   * 변수 선언 주의 사항 * 
   1. 문자, 숫자, $ ,_ 사용 
   2. 첫글자 술자 불가 
   3. 예약어 사용불가 
   4. 상수는 대문자 
   5. 읽기 쉽게 


-------------------------------------------------------------------------------------------------------------------------



[ 자료형 ]

1. 문자형 : string 
   ㄱ. 표기법 
    - 자스엔진에게 문자열임을 인지시켜주는 리터럴 
    const name = "mike"
    const name = 'mike'
    const name = `mike` (백틱)
    const name = '' --> 아무것도 적지 않은 빈 문자열도 string이다. 


    ㄴ. 문자형 응용 
    const aa = "마이크"
    const bb = "나는 "
    const cc = " 이다 . " 
    const age2 = 30;

    console.log(aa + bb + cc + age2 )

    <백틱의 특징>
    1. 백틱은 문자형에 변수를 사용할 떄 편리 * 
    ex)  const messsage = `그의 이름은 ${name}이다.`
    ex)  const messsage = `그의 이름은 ${name+10}이다.` --> 표현식도 가능하다. 
    2. 줄바꿈을 해도 에러가 나지 않는다. 

    <문자열 특이사항>
    1. '' == '    ' 의 결과값은 false 이다. 
    2. 문자열 리터럴 안에 '', 와 ""를 넣고 싶을떄 
      '""', "''" 감싸주면 된다. --> 같은 따음표를 사용하고 싶을떄 는 \'를 사용하면 된다. 
    3. \를 표기하고싶을떄는 \\ 두번 사용하면 된다. 
    4. '', ""안에 줄바꿈을 사용하고 싶을때는 \n




2. 숫자형 : number 
  const  age = 30;
  const PI = 3.14;

  console.log(1+2) // 더하기
  console.log(10 - 3 ) // 뺴기 
  console.log(3*2) // 곱하기
  console.log(6/3)  // 나누기 
  console.log(6%4)  // 나누고 남은 값 

  ? 숫자를 0으로 나눈다면? 
    ex) cosnt x = 1/0  --> infinity 무한대 

  ? 문자열을 숫자로 나눈다면? --> NaN (Not of Number)
    ex) const name = mike
        const y =  name/2 

  <숫자형 특이사항>
  1. 사칙연산이 가능하다. 
  2. 숫자와 관련된 작업시 NaN이 아닌지 항상 염두해둬야한다. 
  

3. 논리형 : boolean 

  const a = true; //참 
  const b = false; //거짓 


4. null / undefined 
  null 
  - 아무것도 없다라는 값. 
  - console.log( typeof null) // object 라는 결과 
  * 하지만 null은 객체가 아니다. --> 자스 초기버전의 오류 


 

-----------------------------------------------------------------------------------------------------------------------------------


[알림창]
- alert, prompt, comfirm 

  <단점>
    - 스크립트의 일시정지
    - 스타일링 불가 
    - 브라우저마다 모양이 다르다. 

1. alert // 알려줌
2. promt // 입력받음
    - 참의 결과값은 문자열이다. 
    - 취소시 null 값이 출력된다. 
    - 두개의 인수를 가지며 두번째 인자에서 default값을 입력할 수 있다. 
    


3. comrfirm //확인함 
  - alert와의 차이점 
      - alert는 확인 버튼만 존재하나 comfirm은 확인과 취소버튼이 있다. 
      - 결과값이 boolean형으로 도출되며 확인은 true, 취소는 false 


--------------------------------------------------------------------------------------------------------------------------------------------------------

[ 형변환 ]

  Q 형변환이 필요한 이유?
    if) 만약 자료형이 다른게 더해지면 어떠한 결과값이 발생할까?
        ex) "문자" + "문자" --> 문자형
            200 + 2000 --> 숫자형
            "문자" + 390  -->  ? 
            --> 에측하지 못한 다른 결과 값이 발생하기 때문 


    ㄱ. 자동형변환 
      "문자형" / 3 --> 결과값 숫자형 
      "문자형" / "문자형" --> 숫자형 
      - 연산/비교 시에 자동형변환이 주로 발생한다. 
      --> 예기치 못한 상황을 발생시키기때문에 명시적으로 형변환을 지켜주어 에러를 방지해야한다. 


    ㄴ. 명시적 형변환  - String(), Number(), Boolean() 

        1. String()
          - 문자형으로 변환 

        2. Number()
          - 숫자형으로 변환 
          - 문자와영어가 섞일경우 ) NaN
          - ture) 1
          - false ) 0 
          * 주의사항 -- 암기필요
            null --> 0
            undefined --> NaN
            0 --> false
            '0' --> ture;
            "" --> false
            ' " -> ture 

        3. Boolean()
          - 불린형으로 변환 
          - 0, "", null, NaN, undefined ) false  
            -> if문 조건문에서 활용되는 Falsy
          - 그외는 모두 ) ture 

--------------------------------------------------------------------------------------------------------------------

[ 연산자 ]

+ , - , * , / , %

- 응용 
- 거듭제곱 :  ** 

  Q) 나머지는 어디에 쓸까?
    - 홀수,짝수, 
    - %5 --> 5보다 작은 수 얻기 

  < 우선 순위 > 
    -  *, / > +,- 


  <연산자 줄여서 쓰기 >
    num += 5 ---> num = num + 5와 같다
      -- 더한뒤 넣어라! 

  < 증가 연산자 / 감소연산자 >
    - 값을 1만큼 증가 혹은 감소시킨다. 

    - 증가 연산자 ++ 
        - num ++ 
        - ++num 

    - 감소 연산자 -- 
        - num--
        - --num 

    Q) 연산자의 위치에 따른 차이는 ?  
        ex)  let num = 10; 
             let result = num++ // 10 
             let result = ++num // 11 

            num++ 의 경우 그 다음줄 부터 시행된다. 이전값을 담고있다. 
            ++num 의 경우 해당 줄부터 시행된다. 

    < 비교 연산자 >
      > ,  <,  >=, <=, ==, !=
      크다 ,작다, 크거나 같다, 작거나 같다 , 같다 , 같지 않다. 
      -- > 반환 값은 언제나 booleanr값이다. 

      * 특이 사항 
        비교 연산자에는 동등연산자와 일치연산자가 있다.  
        동등연산자 ==,
        일치 연산자  === 

        == 의 경우 타입과 무관하게 값만을 비교하지만 
        ===의 경우 늘어난 =의 숫자처럼 좀더 세부적으로 들어가 값의 타입까지 일치해야 true가 반환된다. 
        --> 따라서 코드를 작성할때는 일치연산자 ===을 쓰는것을 추천한다. 


-----------------------------------------------------------------------------------------------------------------------------------------------------------
[ if 문 ]
- ()조건문의 값이 true면 실행하는 코드  
- 코드가 한줄 뿐이면  {} 를 생략할 수 있다. 

- if문이 판단하는 값은 
  1. boolean의 참/거짓
  2. Truthy(참으로 간주되는 값) / Falsy(거짓으로 간주되는 값) 값
  - 해당값을 조건으로 활용할 수 있습니다. 


  * Falsy의 종류 
    false
    null
    undefined
    0
    NaN
    빈 문자열 ("")

  * Truthy의 종류 
    -  Falsy 값 이외의 모든 값들을 포함
    1. 문자열, (빈 문자열 제외 )
    2. 숫자, (0 제외 )
    3. 객체,
    4.  배열 


    ---> 불리언이 아니더라도 JavaScript는 자동으로 Truthy나 Falsy로 변환하여 조건을 판단합니다. 


    1. if , else , else if 
      - if 는 true일때 실행
      - else는 false일떄 실행 
      - else if 만약 이게 맞다면 
      

    -----------------------------------------------------------------------------------------------------------------------------------------------

    [ 논리 연산자 ]
      1. || (or) : 하나라도 true면 true 
          - or은 첫번째 true를 발견하는 즉시 평가를 멈춘다. 
      2. && (and) : 모든 값이 ture면 ture 
          - 첫번째 false를 발견하는 즉시 평가를 멈춘다. 
      3. not (Not) : ture와 false를 서로 반대값으로 변환 


      논리 연산자 코드 작성의 순서에 관한 tip 
        - 시간을 줄여 성능 최적화를 위한 작성하는 법 
        ex)  운전면허가 있고 시력이 좋은 여군
              - 운전면허 : 80%;
              - 시력이 : 60%;
              - 여군: 8%; 
              -> 여군인데 시력이 좋고 운전면허가 있는 사람 의 순서로 진행되어야함 

      ** 연산자에도 우선순위가 있다. 
        && > ||
        &&가 ||보다 우선 순위가 높다. 
        따라서 && ||를 하나의 조건에 함꼐 사용한다면 숫자 계산 처럼 || 비교 쪽에 ()를 감싸 먼저 할 수 있도록 해준다. 

